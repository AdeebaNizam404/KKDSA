I had previously cleared the screen round of google, so I scheduled all the coding rounds on the same day with 1 hour gap. Here are the different questions that were asked in each of the rounds:


Round 1
Question: You are given a graph of cities where each vertice denotes a city, and the edges represent the connectivity between two cities. You can assume that the cost to travel from one city to another connected by a single edge is 1 unit. There are two friends Alice and Bob who live in two different cities and want to reach to destination city to attend a concert. Both Alice and Bob plan to take cabs from their cities to reach the destination. They may decide to share a cab in order to minimize the total cost to travel the destination city. Your task is to find the minimum cost for both Alice and Bob combined to reach destination.
Example:


A - B
|   |
D - C
|   |
E - F
Alice=A, Bob=E, destination=C
Output: 3 (Alice go from A to D, cost=1. Bob go from E to D, cost=1. Then both Alice and Bob share a cab from D to C, cost=1. Hence, total cost = 1+1+1 = 3)
My Take: I was not able to solve this problem as I was too fixated on trying to come up with an optimal approach so just kept ignoring the interviewer asking me to implement the brute-force solution. Would appreciate a lot if someone could provide an optimal solution for this problem, and how one shoud approach it!


Round 2
Question: You have to write a function fn(value: int), which takes an integer as input and stores it in a data stream. You are also given a distance. After each insertion your method must return a triplet (x,y,z) of values from the data stream that satisfy the following condition: abs(x-y)<=distance && abs(y-z)<=distance && abs(z-x)<=distance. If no such triplet exists then return None.
Example: distance=3, input=[1,5,-2,3,2]
Output: [None, None, None, None, (1,2,3)]
My Take: Started by thinking DP, but quickly realised that it wont be the most optimal approach. In the meantime, interviewer gave the hint that think of this data stream as a number-line, so came up with an approach to sort the data stream after every insertion an find the triplets by doing a linear scan for a subarray of length 3 where the abs difference of first and last element is less than or equal to distance. To get rid of sorting gave an optimized approach to maintain a sorted order of data stream while insertion using monotonic stack and a temporary stack. Interviewer was good with this approach.


Round 3
Question: You are given a list of words, and you need to return the list of ambigrams. You will be given a dictionary of characters and their ambigram.
Example: [pod, swims, xyt]
Output: [pod, swims]
My Take: It was straight-forward, I iterated over each word and converted each character into its ambigram on the way using two pointer approach. The interviewer was satisfied and asked a follow-up.
Follow-up: You are given a list of words and you need to find the list of interesting words. A word is interesting if its ambigram is present in the input list.
My Take: Updated my above approach and converted the input list into a set for quicker look-up. And could solve it in optimized manner.
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------